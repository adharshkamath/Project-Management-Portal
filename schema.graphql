scalar Year

scalar Date

scalar EmailAddress

scalar CleanString

scalar Password

interface User {
	id: ID!
	email: EmailAddress!
	absolute_year: Year!
}

type Applicant implements User {
	id: ID!
	email: EmailAddress!
	absolute_year: Year!
	applicant_year: Int!
	first_name: CleanString!
	middle_name: CleanString!
	last_name: CleanString!
	applications: [Application!]
}

type Mentor implements User { 
	id: ID!
	email: EmailAddress!
	name: CleanString!
	absolute_year: Year!
	organization: [Organization!]!
	projects: [Project!]!
}


type OrgAdmin implements User {
	id: ID!
	email: EmailAddress!
	name: CleanString!
	absolute_year: Year!
	organization: [Organization!]
}

type SuperAdmin implements User {
	id: ID!
	email: EmailAddress!
	name: CleanString!
	absolute_year: Year!
}

type Application {
	accepted: Boolean!
	result: Boolean!
	project: Project!
	applicant: Applicant!
    year: Year!
}

type Organization {
	id: ID!
	name: CleanString!
	projects: [Project!]!
	mentors: [Mentor!]!
	OrgAdmins: [OrgAdmin!]!
}

type Project {
	id: ID!
	name: CleanString!
	work: CleanString!
	deliverables: CleanString!
	prerequisites: [CleanString!]!
	absolute_year: Year!
	project_start_date: Date!
	project_end_date: Date!
	organization: Organization!
	mentors: [Mentor!]!
    applications: [Application!]!
	contributors: [Applicant!]!
}


type Query {
	projects(year: Year, orgId: ID, mentor_id: ID, applicant_id: ID): [Project!]!
	project(id: ID!): Project!
	organizations(year: Year): [Organization!]!
	organization(org_id: ID!): Organization!
	applications(year: Year, applicant_id: ID, project_id: ID, orgId: ID): [Application!]!	
	mentors(year: Year, org_id: ID): [Mentor!]!
	mentor(mentorId: ID!): Mentor!
	applicants(year: Year): [Applicant!]!
	applicant(applicant_id: ID!): Applicant!
    orgAdmin(org_admin_id: ID!): OrgAdmin!
	orgAdmins(org_id: ID): [OrgAdmin!]!	
	superAdmins(year: Year): [SuperAdmin!]!
	superAdmin(superAdminId: ID!): SuperAdmin!
}

type Mutation {
	addApplication(project_id: ID!, applicant_id: ID!): Application
	deleteApplication(project_id: ID!, applicant_id: ID!, year: Year): Boolean!
	acceptApplication(project_id: ID!, applicant_id: ID!): Application
	passApplication(project_id: ID!, applicant_id: ID!): Application
	addProject(
		name: CleanString!,
		work: CleanString!,
		deliverables: CleanString!,
		prerequisites: [CleanString!]!,
		absolute_year: Year!,
		project_start_date: Date!,
		project_end_date: Date!,
		organization_id: ID!,
		mentor_ids: [ID!]!,
	): Project
	deleteProject(project_id: ID!): Boolean!
	updateProject(
		project_id: ID!,
		name: CleanString!,
		work: CleanString!,
		deliverables: CleanString!,
		prerequisites: CleanString!, 
		startDate: CleanString!,
		endDate: CleanString!,
		organization: CleanString!,
		mentors: CleanString!,
	): Project
	addApplicant(
		email: EmailAddress!,
		password: Password!,
		first_name: CleanString!,
		middle_name: CleanString!,
		last_name: CleanString!,
		applicant_year: Int!,
	): Applicant!
	deleteApplicant(applicant_id: ID!): Boolean!
	editApplicant(applicant_id: ID!, email: EmailAddress!, password: Password!): Applicant!
	addMentor(
		email: EmailAddress!,
		password: Password!,
		name: CleanString!,
		org_id: [ID!]!,
	): Mentor
	deleteMentor(mentorId: ID!): Boolean!
	addOrganization(org_name: CleanString!): Organization
	deleteOrganization(org_id: ID!): Boolean!
	addOrgAdmin(
		email: EmailAddress!,
		password: Password!,
		name: CleanString!,
		absolute_year: CleanString!,
		organization_id: ID!,
	): OrgAdmin
	deleteOrgAdmin(orgAdminId: ID!): Boolean!
}